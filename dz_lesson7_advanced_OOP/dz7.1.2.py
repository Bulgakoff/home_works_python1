'''## #1.	Реализовать класс Matrix (матрица). Обеспечить перегрузку
# конструктора класса (метод __init__()), который должен принимать данные
# (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин,
# расположенных в виде прямоугольной схемы.
# Примеры матриц: 3 на 2,        3 на 3,       2 на 4.

# 31	22
# 37	43
# 51	86

# 3 	5	32
# 2 	4	6
# -1	    64	-8

# 3 	5	8	3
## 8	    3	7	1'''

'''# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов
# класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно —
# первый элемент первой строки первой матрицы складываем с первым элементом первой строки
# второй матрицы и т.д.
'''


class Matrix:
    def __init__(self, pasas):
        self.matr1 = pasas
        self.mtr_com = []

    def __add__(self, other):
        try:
            for i in range(len(self.matr1)):
                inter = []
                for j in range(len(self.matr1[i])):
                    inter.append(self.matr1[i][j] + other.matr1[i][j])
                self.mtr_com.append(inter)
            return self.mtr_com
        except IndexError as q:
            print(f' нужна одна длина списков или размер базового аргумента  self.matr1 '
                  f'должен быть меньше другого {q}')

    def __str__(self):
        if len(self.mtr_com) == 0:
            return f'выводим только базовый аргумент  self.matr1 == {self.matr1}'
        else:
            return f'складываем две матрицы {self.matr1} --------> {self.mtr_com}'


mat3_2 = [[1, 1], [4]]
mat2_4 = [[1, 1], [1, 2], [23, 7, 1]]

lstlst_1 = Matrix(mat3_2)
print(lstlst_1)
lstlst_2 = Matrix(mat2_4)
# ///////////сложение матриц ////////////////
qwe = lstlst_1 + lstlst_2
print(qwe)
